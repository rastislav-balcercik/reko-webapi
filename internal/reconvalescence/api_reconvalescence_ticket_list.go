/*
 * Reconvalescence Support API
 *
 * Reconvalescence support
 *
 * API version: 1.0.0
 * Contact: rasto.balcercik@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

 package reconvalescence

import (
   "net/http"

   "github.com/gin-gonic/gin"
)

type ReconvalescenceTicketListAPI interface {

   // internal registration of api routes
   addRoutes(routerGroup *gin.RouterGroup)

    // CreateReconvalescenceTicket - Saves new entry into Reconvalescence list
   CreateReconvalescenceTicket(ctx *gin.Context)

    // DeleteReconvalescenceTicket - Deletes specific reconvalescence ticket
   DeleteReconvalescenceTicket(ctx *gin.Context)

    // GetReconvalescenceList - Provides the reconvalence list
   GetReconvalescenceList(ctx *gin.Context)

    // GetReconvalescenceTicket - Provides details about reconvalsescence ticket
   GetReconvalescenceTicket(ctx *gin.Context)

    // UpdateReconvalescenceTicket - Updates specific entry
   UpdateReconvalescenceTicket(ctx *gin.Context)

 }

 // partial implementation of ReconvalescenceTicketListAPI - all functions must be implemented in add on files
type implReconvalescenceTicketListAPI struct {

}

func newReconvalescenceTicketListAPI() ReconvalescenceTicketListAPI {
  return &implReconvalescenceTicketListAPI{}
}

func (this *implReconvalescenceTicketListAPI) addRoutes(routerGroup *gin.RouterGroup) {
  routerGroup.Handle( http.MethodPost, "/reconvalescence-list/:userId/entries", this.CreateReconvalescenceTicket)
  routerGroup.Handle( http.MethodDelete, "/reconvalescence-list/:userId/entries/:entryId", this.DeleteReconvalescenceTicket)
  routerGroup.Handle( http.MethodGet, "/reconvalescence-list/:userId/entries", this.GetReconvalescenceList)
  routerGroup.Handle( http.MethodGet, "/reconvalescence-list/:userId/entries/:entryId", this.GetReconvalescenceTicket)
  routerGroup.Handle( http.MethodPut, "/reconvalescence-list/:userId/entries/:entryId", this.UpdateReconvalescenceTicket)
}

// Copy following section to separate file, uncomment, and implement accordingly
// // CreateReconvalescenceTicket - Saves new entry into Reconvalescence list
// func (this *implReconvalescenceTicketListAPI) CreateReconvalescenceTicket(ctx *gin.Context) {
//  	ctx.AbortWithStatus(http.StatusNotImplemented)
// }
//
// // DeleteReconvalescenceTicket - Deletes specific reconvalescence ticket
// func (this *implReconvalescenceTicketListAPI) DeleteReconvalescenceTicket(ctx *gin.Context) {
//  	ctx.AbortWithStatus(http.StatusNotImplemented)
// }
//
// // GetReconvalescenceList - Provides the reconvalence list
// func (this *implReconvalescenceTicketListAPI) GetReconvalescenceList(ctx *gin.Context) {
//  	ctx.AbortWithStatus(http.StatusNotImplemented)
// }
//
// // GetReconvalescenceTicket - Provides details about reconvalsescence ticket
// func (this *implReconvalescenceTicketListAPI) GetReconvalescenceTicket(ctx *gin.Context) {
//  	ctx.AbortWithStatus(http.StatusNotImplemented)
// }
//
// // UpdateReconvalescenceTicket - Updates specific entry
// func (this *implReconvalescenceTicketListAPI) UpdateReconvalescenceTicket(ctx *gin.Context) {
//  	ctx.AbortWithStatus(http.StatusNotImplemented)
// }
//

